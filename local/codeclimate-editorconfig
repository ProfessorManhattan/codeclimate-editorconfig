#!/usr/bin/env node

const { readFile } = require('fs')
const { promisify } = require('util')
const { existsSync, statSync } = require('fs')
const { join } = require('path')
const glob = require('fast-glob')
const Lintspaces = require('lintspaces')
const { relative } = require('path')

const read = promisify(readFile)

const issues = (files, cwd = '/code') => {
  const issues = []

  for (const file in files) {
    // reset path to be relative to project
    const path = relative(cwd, file)

    const details = files[file]

    for (const num in details) {
      const errors = details[num]

      for (const error of errors) {
        issues.push({
          type: 'issue',
          severity: 'minor',
          categories: ['Style'],
          check_name: error.code,
          description: error.message,
          location: {
            path,
            lines: {
              begin: error.line,
              end: error.line
            }
          }
        })
      }
    }
  }

  return issues
}

// lintspaces configuration
const ignores = [
  'js-comments',
  'c-comments',
  'java-comments',
  'as-comments',
  'xml-comments',
  'html-comments',
  'python-comments',
  'ruby-comments',
  'applescript-comments'
]

const validator = (config = {}, output = process.stdout, cwd = '/code') => {
  // default values
  let exclude = config.exclude_paths || []
  let include = config.include_paths || ['**']
  const editorconfig = config.editorconfig || join(cwd, '.editorconfig')

  // prep paths for use with glob
  // include = include.map(path => path.replace(/^\/+/, ''))
  include = include.map(path => existsSync(path) && statSync(path).isDirectory() ? join(path, '**') : path)
  exclude = exclude.map(path => `!${join(path, '**')}`)

  return new Promise((resolve, reject) => {
    if (!existsSync(editorconfig) || !statSync(editorconfig).isFile()) {
      return reject(new Error('.editorconfig file required'))
    }

    // setup validator
    const lintspaces = new Lintspaces({ editorconfig, ignores })

    const stream = glob.stream(include.concat(exclude), { cwd, absolute: true })

    stream.once('error', reject)
    stream.on('data', file => lintspaces.validate(file))
    stream.once('end', () => {
      const files = lintspaces.getInvalidFiles()
      issues(files, cwd).forEach(issue => output.write(JSON.stringify(issue) + '\0'))

      resolve()
    })
  })
}

read('/config.json')
  .then(JSON.parse)
  // ignore config file if not present
  .catch(Function.prototype)
  .then(validator)
  // Do not throw errors if there are no files to analyze
  .catch(error => process.stderr.write(error.message + '\n'))
